selenium Hybrid Framework:
Technology Used(Python,selenium,pytest,Page Object model,Html report)

Def Of Framework:mentain all the Automation files in a folder in an organized way.
and in the framework all the files communicate each other.

advantage of design frame work:
re-usability
mantainability

*Design framework for one Ecommerce appliaction ie. "nopcommerce" for "Backend" appliaction.
website for frontend:https://demo.nopcommerce.com/
website for backend:https://admin-demo.nopcommerce.com

Selenium Hybrid framework:
(Python,selenium,pytest,page object model,html report)

step.1>create a new project and install required packages/plugins.

*selenium : selenium libraries
*pyTest : python unittest framework
*pyTest-html : pyTest HTML reports
*pytest xdist : Run tests parallel
*openpyxl : MS excel support
*Allure-pytest : To generate allure reports.

Step.2> Create A Folder Structure.

PROJECT NAME > PageObjetcs(Package) > TestCases(Package) > Utilities(Package) > TestData(Folder) > Configuration(Folder) > Logs(Folder) > Screenshots(Folder) > Reports (Folder) > Run.bat
(NEW)                     (1)                   (2)                   (3)                (4)                   (5)                 (6)                (7)                 (8)           (9) 
 

PAGE OBJECTS:-Here We Create A Class Of The All Pages.for EX,Login page,search page,homepage,add cart page,whishlist page,order page like that.
* first we need to create a file "LoginPage.py" then inside this Create A Class name(Class LoginPage).
* inside the class,mentain all the "Locators",of all the web elements.
* Def __init__(For INitilization)
* Define the function,then perform the "actions"
These All The Things Done Over In "PageObjects"
* Similarly Create One More Page Objects File For"AddSearch.py",in that Create A Class,,Locators,,Actions.similarly for all the Pages create Diff "Classes",then perofrm the actions.
*Always We start from here.by craeting the diff Classes under page objects files.
 

TestCases:-In This Package ,Create A "conftest.py" File, It Contains,"Cross BRowser Checking" we have some piece of code for wrting cross browser checking.
* Create A file name as a "test_login.py",it contains,Class,Methods,logs,screenshots or all the test cases,assertions,true ,false conditions.
* Create "test_login_ddt.py" in this we mention all the excel inforamtion or Code for "DATA DRIVEN TEST CASES",directly it will get the username and password from excel and enter it on webelemnts of username and password

UTILITIES:-Logs will be created under "customlogger.py"
* under "readProperties.py" Here i will "import configparser",i will create a class,methods for url,username,password.
* under "XLutils.py" ,All the excel tables informtion available here.rowcount,colcount,readdata,writedata.

TESTDATA :-wriTE a useraname,password,expected,actual etc,in Msexcel,make it a folder in our machine,then create a folder as "TESTDATA"and paste it here in "TESTDATA" 

CONFIGURATION :- Create a normal file ie "config.py" under this all the common info present.ie URL,USERNAME,PASSWORD but which are not a comes under python,just a file like notepad.

LOGS :- whatever we have written code for logs in "Testcases" pacakge,once you run the testcaes then all the "Logs" will be stored in "Logs".

SCREENSHOTS :-similarly Screenshot,whenever we got our testcase failed,then driver autometically take screenshot,and stored in "Screenshot" folder.

REPORTS :-whenever we write the html report commond in TERMINAL ,as html=reports ,then we will get the html reports,and saved it in "Reports" file


                                                                             
Step.3> Automating login testcases:            

  *Create a login page object class under "pageobjects"
  *Create A login test under "testcases"
  *Create conftest.py under "testcases"

step.4> 
  *Capture a screenhots for failure.

 Note: Page Object Model is design pattern,it is useful in reducing code duplication and improves the test case maintance.

*First i automate "login" test case,for that i need to create an loginpage class under the pageobjects,then i will write login tescase under testcases.then we need to seperate
common things in conftest.py,in this we can create one fixture,that fixture used in all the test cases.like launching browser.these things are comes under the conftest.py and these things are common for evert test cases.

step.5>read common values from ini file.(initilization file)
   * Add "config.ini"file in "Configuration" Folder OR Directory
   * Create "readProperies.py"utility file under the utilities package to read common data.
   * Replace hard coded values in login testcase.

step.6>Adding logs to test cases(warning log,keyword log,info log etc)
   *Add "customLogger.py" under utility package
   *Add logs to Login test case.

step.7>Run Tests On Desired Browsers/Cross Browser/Parallel:Cross Check Browser
   * Update "Conftest.py" with required fixtures which will accept commond line argument(browser name)
   * pass browser name as argument in commond line.

for Cross Browser we use commond for diff browsers.
   Commond line for Chrome: pytest testCases/test_login.py --browser chrome
   commond line for firefox: pytest testCases/test_login.py --browser firefox

To run tests in parallel:
    commond line for chrome: pytest -v -s -n=2 testcases/test_login.py --browser chrome  ('n' indicates that how many "methods" we are using in your "test cases)
    commond line for firefox:pytest -v -s -n=2 testcases/test_login.py --browser firefox

step.8>Generate HTML reports:
    * update conftest.py with pytest hooks.
    * To Generate HTML report run below commond.
For this we have use commond line:pytest -s -v -n=2 --html=reports\report.html testcases/test_login.py --browser chrome.
 **To generate html report,we write some code in 'conftest.py' file.

step.9>Automating Data driven test cases.
    * Prepare test cases in excel sheet,place the excel file inside the TestData folder
    * Create the 'ExcelUtils.py' utility class under the utilities package.
    * Create 'LoginDataDrivenTest' undertestCases
    * Run the test case

NOTE:-In your company,you can start it from here,that is start it from writting/adding test cases.Once after frame work is done,will start from writting/adding test cases.

step.10>Adding new test cases.
   1)Add New Customer
   2)Search customer By Email
   3)Search Customer By Name

step.11>Grouping tests
    * Grouping markers(Add markers to every test method)
    @pytest.mark.sanity
    @pytest.mark.regression.

step.12>  


  
             